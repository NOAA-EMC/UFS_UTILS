name: intel
on: [push, pull_request]

defaults:
  run:
    shell: bash -lieo pipefail {0}

jobs:
  build:
    runs-on: ${{ matrix.os }}
    env:
      CC: icc
      FC: ifort
      CXX: icpc
    strategy:
      matrix:
        os: [ubuntu-20.04]

    steps:

    - name: install-intel
      run: |
        cd /tmp
        wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
        sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
        rm GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
        echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo apt update
        sudo apt-get install intel-oneapi-dev-utilities intel-oneapi-mpi-devel intel-oneapi-openmp intel-oneapi-compiler-fortran intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic
        echo "source /opt/intel/oneapi/setvars.sh" >> ~/.bash_profile

    - name: cache-esmf
      id: cache-esmf
      uses: actions/cache@v2
      with:
        path: ~/esmf
        key: esmf-${{ runner.os }}-8.0.1-2-intel

    - name: build-esmf
      if: steps.cache-esmf.outputs.cache-hit != 'true'
      run: |
        set -x
        pushd ~
        export ESMF_DIR=~/esmf-ESMF_8_0_1
        wget https://github.com/esmf-org/esmf/archive/ESMF_8_0_1.tar.gz &> /dev/null && ls -l
        tar zxf ESMF_8_0_1.tar.gz && ls -l
        cd esmf-ESMF_8_0_1
        export ESMF_COMM=intelmpi
        export ESMF_INSTALL_BINDIR=bin
        export ESMF_INSTALL_LIBDIR=lib
        export ESMF_INSTALL_MODDIR=mod
        export ESMF_COMPILER=intel
        export ESMF_INSTALL_PREFIX=~/esmf
        export ESMF_NETCDF=split
        if [[ ${{ matrix.os }} == "ubuntu-20.04" ]]; then 
          export ESMF_NETCDF_INCLUDE=/usr/include
          export ESMF_NETCDF_LIBPATH=/usr/x86_64-linux-gnu
        elif [[ ${{ matrix.os }} == "macos-10.15" ]]; then
          export ESMF_NETCDF_INCLUDE=/usr/local/include
          export ESMF_NETCDF_LIBPATH=/usr/local/lib
        fi
        make -j2
        make install

    - name: cache-jasper
      id: cache-jasper
      uses: actions/cache@v2
      with:
        path: ~/jasper
        key: jasper-${{ runner.os }}-2.0.22

    - name: build-jasper
      if: steps.cache-jasper.outputs.cache-hit != 'true'
      run: |
        set -x
        pwd
        wget https://github.com/jasper-software/jasper/archive/version-2.0.22.tar.gz &> /dev/null && ls -l
        tar zxf version-2.0.22.tar.gz && ls -l
        cd jasper-version-2.0.22
        mkdir build-jasper && cd build-jasper
        cmake .. -DCMAKE_INSTALL_PREFIX=~/jasper
        make -j2
        make install

    - name: checkout-nceplibs
      uses: actions/checkout@v2
      with:
        repository: NOAA-EMC/NCEPLIBS
        path: nceplibs

    - name: cache-nceplibs
      id: cache-nceplibs
      uses: actions/cache@v2
      with:
        path: ~/nceplibs
        key: nceplibs-${{ runner.os }}-1.3.0

    - name: build-nceplibs
      if: steps.cache-nceplibs.outputs.cache-hit != 'true'
      run: |
        set -x
        export ESMFMKFILE=~/esmf/lib/esmf.mk
        wget https://github.com/NOAA-EMC/NCEPLIBS/archive/v1.3.0.tar.gz &> /dev/null
        tar zxf v1.3.0.tar.gz && ls -l
        cd NCEPLIBS-1.3.0
        mkdir build && cd build
        cmake .. -DCMAKE_PREFIX_PATH='~;~/jasper' -DCMAKE_INSTALL_PREFIX='~/nceplibs' -DFLAT=ON
        make -j2
       
    - name: checkout-ufs-utils
      uses: actions/checkout@v2
      with: 
        path: ufs_utils

    - name: build-ufs-utils
      run: |
        set -x
        mpicc --version
        mpifort --version
        pwd
        export ESMFMKFILE=~/esmf/lib/esmf.mk
        cd ufs_utils
        mkdir build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_PREFIX_PATH='~;~/jasper;~/nceplibs' -DENABLE_DOCS=On
        make -j2
        make test

