name: nceplibs
on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    env:
      CC: gcc-9
      FC: gfortran-9
      CXX: g++-9
    strategy:
      matrix:
        os: [macos-10.15, ubuntu-20.04]
        compiler: [gcc-9]
        nceplibs_version: [develop, 1.3.0]

    steps:
    - name: cache-mpich
      id: cache-mpich
      uses: actions/cache@v2
      with:
        path: ~/mpich
        key: mpich-${{ runner.os }}-3.3.2-1

    - name: build-mpich
      if: steps.cache-mpich.outputs.cache-hit != 'true'
      run: |
        if [[ ${{ matrix.os }} == "macos-10.15" ]]; then
          wget http://www.mpich.org/static/downloads/3.3.2/mpich-3.3.2.tar.gz &> /dev/null
          tar -xzf mpich-3.3.2.tar.gz
          pushd mpich-3.3.2
          ./configure --prefix=$HOME/mpich
          make
          sudo make install
          popd
        fi

    - name: install-dependencies
      run: |
        echo "/home/runner/mpich/bin" >> $GITHUB_PATH
        if [[ ${{ matrix.os }} == "ubuntu-20.04" ]]; then
          sudo apt-get update
          sudo apt-get install libmpich-dev
          sudo apt-get install doxygen
          sudo apt-get install libpng-dev
          sudo apt-get install libjpeg-dev
        elif [[ ${{ matrix.os }} == "macos-10.15" ]]; then
          echo "$HOME/mpich/bin" >> $GITHUB_PATH
          brew update
          brew install doxygen
          brew install mpich
          brew install wget
          if [[ ${{ matrix.compiler }} == "gcc-9" ]]; then
            sudo ln -sf /usr/local/bin/gfortran-9 /usr/local/bin/gfortran
          elif  [[ ${{ matrix.compiler }} == "gcc-10" ]]; then
            sudo ln -sf /usr/local/bin/gfortran-10 /usr/local/bin/gfortran
          fi
        fi
        python3 -m pip install gcovr

    - name: cache-netcdf
      id: cache-netcdf
      uses: actions/cache@v2
      with:
        path: ~/netcdf
        key: netcdf-c-${{ runner.os }}-4.7.4

    - name: build-hdf5
      if: steps.cache-netcdf.outputs.cache-hit != 'true'
      run: |
        set -x
        export CC=mpicc
        wget https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/hdf5-1.10.7/src/hdf5-1.10.7.tar.gz &> /dev/null
        tar -xzf hdf5-1.10.7.tar.gz
        pushd hdf5-1.10.7
        ./configure --prefix=${HOME}/netcdf --enable-parallel --disable-tools --disable-fortran --disable-cxx --enable-parallel-tests
        make -j2
        make install
           
    - name: build-netcdf-c
      if: steps.cache-netcdf.outputs.cache-hit != 'true'
      run: |
        set -x
        ls -l ${HOME}/netcdf
        export CC=mpicc
        export CPPFLAGS=-I${HOME}/netcdf/include
        export LDFLAGS=-L${HOME}/netcdf/lib
        wget https://www.unidata.ucar.edu/downloads/netcdf/ftp/netcdf-c-4.7.4.tar.gz &> /dev/null
        tar -xzf netcdf-c-4.7.4.tar.gz
        pushd netcdf-c-4.7.4
        ./configure --prefix=${HOME}/netcdf --disable-dap --disable-utilities
        make -j2
        make install

    - name: build-netcdf-fortran
      if: steps.cache-netcdf.outputs.cache-hit != 'true'
      run: |
        set -x
        export PATH="${HOME}/netcdf/bin:$PATH"
        export CC=mpicc
        export FC=mpifort
        export CPPFLAGS=-I${HOME}/netcdf/include
        export LDFLAGS=-L${HOME}/netcdf/lib
        wget https://github.com/Unidata/netcdf-fortran/archive/v4.5.3.tar.gz &> /dev/null
        tar -xzf v4.5.3.tar.gz
        pushd netcdf-fortran-4.5.3
        ./configure --prefix=${HOME}/netcdf
        make -j2
        make install

    - name: cache-esmf
      id: cache-esmf
      uses: actions/cache@v2
      with:
        path: ~/esmf
        key: esmf-${{ runner.os }}-8.0.1-2

    - name: build-esmf
      if: steps.cache-esmf.outputs.cache-hit != 'true'
      run: |
        set -x
        pushd ~
        export ESMF_DIR=~/esmf-ESMF_8_0_1
        wget https://github.com/esmf-org/esmf/archive/ESMF_8_0_1.tar.gz &> /dev/null && ls -l
        tar zxf ESMF_8_0_1.tar.gz && ls -l
        cd esmf-ESMF_8_0_1
        export ESMF_COMM=mpich3
        export ESMF_INSTALL_BINDIR=bin
        export ESMF_INSTALL_LIBDIR=lib
        export ESMF_INSTALL_MODDIR=mod
        export ESMF_COMPILER=gfortran
        export ESMF_INSTALL_PREFIX=~/esmf
        export ESMF_NETCDF=split
        export ESMF_NETCDF_INCLUDE=${HOME}/netcdf/include
        export ESMF_NETCDF_LIBPATH=${HOME}/netcdf/lib
        make -j2
        make install

    - name: cache-jasper
      id: cache-jasper
      uses: actions/cache@v2
      with:
        path: ~/jasper
        key: jasper-${{ runner.os }}-2.0.22

    - name: build-jasper
      if: steps.cache-jasper.outputs.cache-hit != 'true'
      run: |
        set -x
        pwd
        wget https://github.com/jasper-software/jasper/archive/version-2.0.22.tar.gz &> /dev/null && ls -l
        tar zxf version-2.0.22.tar.gz && ls -l
        cd jasper-version-2.0.22
        mkdir build-jasper && cd build-jasper
        cmake .. -DCMAKE_INSTALL_PREFIX=~/jasper
        make -j2
        make install

    - name: checkout-nceplibs
      run: |
        git clone https://github.com/NOAA-EMC/NCEPLIBS.git nceplibs
        cd nceplibs
        if [[ ${{ matrix.nceplibs_version }} == "1.3.0" ]]; then
          git checkout v1.3.0
        fi

    - name: get-git-hash
      run: |
        cd nceplibs
        git rev-parse HEAD > hash.txt
        
    - name: cache-nceplibs 
      id: cache-nceplibs
      uses: actions/cache@v2
      with:
        path: ~/nceplibs
        key: nceplibs-${{ matrix.nceplibs_version }}-${{ runner.os }}-${{ hashFiles('nceplibs/hash.txt') }}

    - name: build-nceplibs
      if: steps.cache-nceplibs-develop.outputs.cache-hit != 'true'
      run: |
        set -x
        export ESMFMKFILE=~/esmf/lib/esmf.mk
        cd nceplibs
        mkdir build && cd build
        cmake .. -DCMAKE_PREFIX_PATH='~;~/jasper' -DCMAKE_INSTALL_PREFIX='~/nceplibs' -DFLAT=ON
        make -j2
       
    - name: checkout-ufs-utils
      uses: actions/checkout@v2
      with: 
        path: ufs_utils

    - name: build-ufs-utils
      run: |
        export ESMFMKFILE=~/esmf/lib/esmf.mk
        cd ufs_utils
        mkdir build && cd build
        cmake .. -DCMAKE_PREFIX_PATH='~/jasper;~/nceplibs;~/netcdf' -DENABLE_DOCS=On -DCMAKE_Fortran_FLAGS="-g -fprofile-arcs -ftest-coverage -O0"
        make -j2
        ctest --rerun-failed --output-on-failure
        export PATH="/home/runner/.local/bin:$PATH"
        gcovr -r .. --html-details -o test-coverage.html

    - uses: actions/upload-artifact@v2
      if: ${{ matrix.os == 'ubuntu-20.04' }}
      with:
        name: test-coverage
        path: ufs_utils/build/*.html
